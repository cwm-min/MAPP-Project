#include <xc.h>
#include "lcd.h"
#include "delays.h"
#include "keypad.h"
#define KEY_DA PORTBbits.RB5   	//  74922 DA output
#define moisture PORTCbits.RC1
#define pir PORTCbits.RC0


unsigned char hour, minute, second, hourA, minuteA, hourB, minuteB, hourC, minuteC, hourD, minuteD;
int i;

char int_2_char (unsigned char int1)
{
	char char1;
	switch (int1)
	{
		case 0 : char1 = '0' ; break;
		case 1 : char1 = '1' ; break;
		case 2 : char1 = '2' ; break;
		case 3 : char1 = '3' ; break;
		case 4 : char1 = '4' ; break;
		case 5 : char1 = '5' ; break;
		case 6 : char1 = '6' ; break;
		case 7 : char1 = '7' ; break;
		case 8 : char1 = '8' ; break;
		case 9 : char1 = '9' ; break;
		default : char1 = '?' ;
	}
	return(char1);
}

unsigned char char_2_int (char char1)
{
	unsigned char int1;
	switch (char1)
	{
		case '0' : int1 = 0 ; break;
		case '1' : int1 = 1 ; break;
		case '2' : int1 = 2 ; break;
		case '3' : int1 = 3 ; break;
		case '4' : int1 = 4 ; break;
		case '5' : int1 = 5 ; break;
		case '6' : int1 = 6 ; break;
		case '7' : int1 = 7 ; break;
		case '8' : int1 = 8 ; break;
		case '9' : int1 = 9 ; break;
		default : int1 = 0 ;
	}
	return(int1);
}

void interrupt ISR_Timer0_Int()
{
	unsigned char hour10, hour1, minute10, minute1, second10, second1;
	if (INTCONbits.TMR0IF == 1)
	{
		TMR0H = 0x48;
		TMR0L = 0xE5;

		second = second + 1;
		if ( second > 59 )
		{
			second = 0;
			minute = minute + 1;
			if ( minute > 59 )
			{
				minute = 0;
				hour = hour + 1;
				if ( hour > 23 )
					hour = 0;
			}
		}

		hour10 = hour / 10;
		hour1 = hour - hour10 * 10;

		minute10 = minute / 10;
		minute1 = minute - minute10 * 10;

		second10 = second / 10;
		second1 = second - second10 * 10;

		lcd_write_cmd(0x80);
		lcd_write_data('t');
		lcd_write_data('i');
		lcd_write_data('m');
		lcd_write_data('e');
		lcd_write_data(' ');
		lcd_write_data('=');
		lcd_write_data(' ');
		lcd_write_data(int_2_char (hour10));
		lcd_write_data(int_2_char (hour1));
		lcd_write_data(':');
		lcd_write_data(int_2_char (minute10));
		lcd_write_data(int_2_char (minute1));
		lcd_write_data(':');
		lcd_write_data(int_2_char (second10));
		lcd_write_data(int_2_char (second1));
        lcd_write_data (' ');
					 
		INTCONbits.TMR0IF = 0;
	}
}

void SetupTime()
{
	unsigned char msgindex, outchar, ctemp;
	unsigned char hour10, hour1, minute10, minute1, second10, second1;
	char Message[ ] = "Set time hhmmss:    ";

	lcd_write_cmd(0x80);

	for (msgindex = 0; msgindex < 16; msgindex++)
	{
		outchar = Message[msgindex];
		lcd_write_data(outchar);
	}

	lcd_write_cmd(0xC0); // Move cursor to line 2 position 1

	ctemp=getkey(); // waits and get an ascii key number when pressed
	lcd_write_data(ctemp); //display on LCD
	hour10 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	hour1 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	minute10 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	minute1 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	second10 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	second1 = char_2_int (ctemp);

	hour = hour10 * 10 + hour1;
	minute = minute10 * 10 + minute1;
	second = second10 * 10 + second1;

	delay_ms(500);
	lcd_write_cmd(0x01);
}

void SetupClosingTime()
{
	unsigned char msgindex, outchar, ctemp;
	unsigned char hour10, hour1, minute10, minute1;    
	char Message[ ] = "Closing Time:   ";

	lcd_write_cmd(0x80);

	for (msgindex = 0; msgindex < 16; msgindex++)
	{
		outchar = Message[msgindex];
		lcd_write_data(outchar);
	}

	lcd_write_cmd(0xC0); // Move cursor to line 2 position 1

	ctemp=getkey(); // waits and get an ascii key number when pressed
	lcd_write_data(ctemp); //display on LCD
	hour10 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	hour1 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	minute10 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	minute1 = char_2_int (ctemp);

	hourA = hour10 * 10 + hour1;
	minuteA = minute10 * 10 + minute1;

	delay_ms(500);
	lcd_write_cmd(0x01);
}

void SetupOpeningTime()
{
	unsigned char msgindex, outchar, ctemp;
	unsigned char hour10, hour1, minute10, minute1;    
	char Message[ ] = "Opening Time:   ";

	lcd_write_cmd(0x80);

	for (msgindex = 0; msgindex < 16; msgindex++)
	{
		outchar = Message[msgindex];
		lcd_write_data(outchar);
	}

	lcd_write_cmd(0xC0); // Move cursor to line 2 position 1

	ctemp=getkey(); // waits and get an ascii key number when pressed
	lcd_write_data(ctemp); //display on LCD
	hour10 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	hour1 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	minute10 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	minute1 = char_2_int (ctemp);

	hourB = hour10 * 10 + hour1;
	minuteB = minute10 * 10 + minute1;

	delay_ms(500);
	lcd_write_cmd(0x01);
}

void SetupOpeningTime2()
{
	unsigned char msgindex, outchar, ctemp;
	unsigned char hour10, hour1, minute10, minute1;    
	char Message[ ] = "Opening Time:   ";

	lcd_write_cmd(0x80);

	for (msgindex = 0; msgindex < 16; msgindex++)
	{
		outchar = Message[msgindex];
		lcd_write_data(outchar);
	}

	lcd_write_cmd(0xC0); // Move cursor to line 2 position 1

	ctemp=getkey(); // waits and get an ascii key number when pressed
	lcd_write_data(ctemp); //display on LCD
	hour10 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	hour1 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	minute10 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	minute1 = char_2_int (ctemp);

	hourC = hour10 * 10 + hour1;
	minuteC = minute10 * 10 + minute1;

	delay_ms(500);
	lcd_write_cmd(0x01);
}

void SetupClosingTime2()
{
	unsigned char msgindex, outchar, ctemp;
	unsigned char hour10, hour1, minute10, minute1;    
	char Message[ ] = "Closing Time:   ";

	lcd_write_cmd(0x80);

	for (msgindex = 0; msgindex < 16; msgindex++)
	{
		outchar = Message[msgindex];
		lcd_write_data(outchar);
	}

	lcd_write_cmd(0xC0); // Move cursor to line 2 position 1

	ctemp=getkey(); // waits and get an ascii key number when pressed
	lcd_write_data(ctemp); //display on LCD
	hour10 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	hour1 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	minute10 = char_2_int (ctemp);

	ctemp=getkey();
	lcd_write_data(ctemp);
	minute1 = char_2_int (ctemp);

	hourD = hour10 * 10 + hour1;
	minuteD = minute10 * 10 + minute1;

	delay_ms(500);
	lcd_write_cmd(0x01);
}
void SetupTimerInterruptRegisters()
{
	RCONbits.IPEN =1;	// Bit7 Interrupt Priority Enable Bit
				// 1 Enable priority levels on interrupts
				// 0 Disable priority levels on interrupts		

	INTCONbits.GIEH =1;	// Bit7 Global Interrupt Enable bit
				// When IPEN = 1
				// 1 Enable all high priority interrupts
				// 0 Disable all high priority interrupts 

	T0CON = 0b00000111;	// bit7:0 Stop Timer0
				// bit6:0 Timer0 as 16 bit timer
				// bit5:0 Clock source is internal 
				// bit4:0 Increment on lo to hi transition on TOCKI pin
				// bit3:0 Prescaler output is assigned to Timer0  
				// bit2-bit0:111 1:256 prescaler


	INTCON2 = 0b10000100;	// bit7 :PORTB Pull-Up Enable bit
				//	 1 All PORTB pull-ups are disabled
				// bit2 :TMR0 Overflow Int Priority Bit
				//       1 High Priority
 
	TMR0H = 0x48;		// Initialising TMR0H
	TMR0L = 0xE5;		// Initialising TMR0L for 1 second interrupt
							 
	T0CONbits.TMR0ON = 1;	// Turn on timer
	INTCONbits.TMR0IE = 1;	// bit5 TMR0 Overflow Int Enable bit
				// 0 Disable the TMR0 overflow int

	INTCONbits.TMR0IF = 0;	// bit2 TMR0 Overflow Int Flag bit
				// 0 TMR0 register did not overflow

}

void motor_CW ()
{   
    for (i=0;i<30;i++)      //time motor turns on (15s)
    {
        PORTAbits.RA0 = 1;      //enable motor
        delay_ms(100);
        PORTAbits.RA1 = 1;      //IN1 (control direction)
        delay_ms(100);
        PORTAbits.RA2 = 0;      //IN2 (control direction)
        delay_ms(100);
    }
}

void motor_STOP ()
{  
    PORTAbits.RA0 = 0;      //disable motor
    delay_ms (100);
    i=0; 
}
void motor_ACW ()
{
    for (i=0;i<30;i++)          //time motor turns on (5s)
    {
        PORTAbits.RA0 = 1;      //enable motor
        delay_ms(100);
        PORTAbits.RA1 = 0;      //In1 (control direction)
        delay_ms(100);
        PORTAbits.RA2 = 1;      //IN2 (control direction)
        delay_ms(100);
    }
}
void displayWindowOpen()
{
	unsigned char msgindex, outchar;
	char Message[ ] = "Window Open     ";

	lcd_write_cmd(0xC0);
	for (msgindex = 0; msgindex < 16; msgindex++)
	{
		outchar = Message[msgindex];
		lcd_write_data(outchar);
	}
}
void displayWindowClose()
{
	unsigned char msgindex, outchar;
	char Message[ ] = "Window Close    ";

	lcd_write_cmd(0xC0);
	for (msgindex = 0; msgindex < 16; msgindex++)
	{
		outchar = Message[msgindex];
		lcd_write_data(outchar);
	}
}

void displayManualClose()
{
	unsigned char msgindex, outchar;
	char Message[ ] = "Manual Close    ";

	lcd_write_cmd(0xC0);
	for (msgindex = 0; msgindex < 16; msgindex++)
	{
		outchar = Message[msgindex];
		lcd_write_data(outchar);
	}
}

void displayManualOpen()
{
	unsigned char msgindex, outchar;
	char Message[ ] = "Manual Open     ";

	lcd_write_cmd(0xC0);
	for (msgindex = 0; msgindex < 16; msgindex++)
	{
		outchar = Message[msgindex];
		lcd_write_data(outchar);
	}
}

void main(void)   //------------ Main Program  ---------------------------------------------------------------
{
	unsigned char displayUpdated, button, scene, manual, manualDisplay;
    manual = 0; //starts in auto
    manualDisplay =0; //no print manual display
	displayUpdated = 1; //window starts close
    scene = 1;  //default to auto close system
    button = 'Z';
    

    TRISA =0x00;
    TRISC = 0xFF;
	ADCON1 = 0x0F;
	CMCON = 0x07;
    
    
	lcd_init();

	SetupTime();
	SetupClosingTime();
    SetupOpeningTime ();
	SetupTimerInterruptRegisters();
    displayWindowClose ();
    
	while(1)
	{
        if (KEY_DA == 1)
        {
            button = getkey ();
        }
        if (button == 'A')  // auto close system
        {
            scene = 10;
            manual =0;
            button = 'Z';  //random value to prevent from looping back to here
        }
        if (button == 'B')  //auto open system
        {
            manual =0;
            scene = 20;
            button ='Z';
        }
        if (button == 'C')  //manual close system
        {
            manualDisplay =1;  //print manual close
            manual =1;
            scene =30;
            button = 'Z';
        }
        if (button == 'D')  //manual open system
        {
            manualDisplay =2;  //print manual open
            manual = 1;
            scene = 40;
            button = 'Z';
        }

        if (scene ==10)
        {
            lcd_write_cmd (0x01);
            INTCONbits.GIEH = 0;
            SetupTime ();
            SetupClosingTime ();
            SetupOpeningTime ();
            INTCONbits.GIEH =1;
            scene = 1;
            if (displayUpdated == 2)
            {
                displayWindowOpen ();
            }
            else
            {
                displayWindowClose ();
            }
        }
        if (scene == 20)
        {
            lcd_write_cmd (0x01);  //clear lcd
            INTCONbits.GIEH = 0;  
            SetupTime ();
            SetupOpeningTime2 ();
            SetupClosingTime2 ();
            INTCONbits.GIEH =1;
            scene =2;
            if (displayUpdated ==2)
            {
                displayWindowOpen ();
            }
            else
            {
                displayWindowClose ();
            }
        }
        
        if (scene ==30)  //manual close
        {
            manualDisplay =1;
            if (displayUpdated == 2)
            {
                motor_ACW ();
                motor_STOP ();
                displayUpdated =1;
            }
            if (KEY_DA == 1) // allows user to change setting when window is in auto close system
            {
                button = getkey ();
            }
        }
        if (scene ==40)  //manual open
        {
            manualDisplay =2;
            if (displayUpdated == 1)
            {
                motor_CW ();
                motor_STOP ();
                displayUpdated = 2;
            }
            if (KEY_DA == 1) // allows user to change setting when window is in manual open
            {
                button = getkey ();
            }
            
        }
        if (manualDisplay ==1)
        {
            displayManualClose ();
            manualDisplay =0;  //prevent repetitive printing
        }
        if (manualDisplay ==2)
        {
            displayManualOpen ();
            manualDisplay =0;  // prevent repetitive printing
        }
        if (scene == 1)
        {
            if(hour==hourA && minute==minuteA)  //auto close system
            {
                if(displayUpdated == 2)
                {
                    displayWindowClose();
                    motor_ACW ();
                    motor_STOP ();
                    displayUpdated = 1;
                }
                while (1)  //wait for opening time
                {
                       if (KEY_DA == 1) // allows user to change setting when window is in auto close system
                    {
                        button = getkey ();
                    }
                    if (button =='C' || button =='D') //manual function
                    {
                        manual = 1;
                        break;
                    }
                    if (button == 'A' || button =='B')  // auto function
                    {
                        break;
                    }
                    if (hour == hourB && minute == minuteB)  //when time is up
                    {
                        break;
                    }
                }
            }
        }
        if (scene ==2)
        {
            if (hour == hourC && minute ==minuteC)
            {
                if (displayUpdated ==1)
                {
                    displayWindowOpen ();
                    motor_CW ();
                    motor_STOP ();
                    displayUpdated =2;
                }
                while (1)
                {
                     if (KEY_DA == 1) // allows user to change setting when window is in auto close system
                    {
                        button = getkey ();
                    }
                    if (button =='C'|| button == 'D')
                    {
                        manual =1;
                        break;
                    }
                    if (button == 'A' || button =='B')  //add more later when adding more button letter
                    {
                        break;
                    }
                    if (hour == hourD && minute == minuteD)
                    {
                        break;
                    }
                
                }
            }
        }
        
        if (manual ==0)
        {
            if (pir == 0)
            {
                if (displayUpdated ==2)
                {
                    displayWindowClose ();
                    motor_ACW ();
                    motor_STOP ();
                    displayUpdated =1;
                            
                }
            }
            else
            {
                if (moisture == 0)
                {
                    if (displayUpdated ==2)
                    {
                        displayWindowClose ();
                        motor_ACW ();
                        motor_STOP ();
                        displayUpdated =1;
                    }
                }
                else
                {
                    if (displayUpdated ==1)
                    {
                        displayWindowOpen ();
                        motor_CW ();
                        motor_STOP ();
                        displayUpdated = 2;
                    }
                }
            }
        }
    }
}
